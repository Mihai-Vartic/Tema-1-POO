#include <iostream>

using namespace std;

struct tuplu
{
    int maxim, poz;
};

class Vector
{
private:
    int n, *v;
   
public:

    friend istream& operator >>(istream& input, Vector &x1);
    friend ostream& operator <<(ostream& output, Vector x1);
    
    Vector(int n, int x)                //constructor de initializare
    {
        this -> n = n;
        v = new int[n];
        for(int i = 0; i < n; i++)
            v[i] = x;
    }
    
    int getN()
    {
        return n;
    }
   
    Vector(const Vector &x1)            //constructor de copiere
    {
        n = x1.n;
        for(int i = 0; i < n; i++)
            v[i] = x1.v[i];
    }
    
    void operator = (Vector const &x1)  //operator de atribuire
    {
        n = x1.n;
        for(int i = 0; i < n; i++)
            v[i] = x1.v[i];
    }
    
    int operator [] (int i)
    {
        return v[i];
    }
    
    void reactualizare(int n, int x)
    {
        for(int i = 0; i < getN(); i++)
            v[i] = x;
    }
    
    int suma()
    {
        int s = 0;
        for(int i = 0; i < getN(); i++)
            s = s + v[i];
        return s;
    }
    
    tuplu max()
    {
        tuplu rez;
        rez.maxim = v[0];
        rez.poz = 1;
        for(int i = 1; i < getN(); i++)
            if(v[i] > rez.maxim)
            {
                rez.maxim = v[i];
                rez.poz = i+1;
            }
        return rez;
    }
    
    int sortare()
    {
        int min, aux, poz, j;
        for(int i = 0; i < getN()-1; i++)
        {
            min = v[i];
            poz = i;
            for(j = i+1; j < getN(); i++)
                if(v[j] < min)
                {
                    min = v[j];
                    poz = j;
                }
            if(poz != i)
            {
                aux = v[i];
                v[i] = min;
                v[poz] = aux;
            }
        }
    }
    
    int operator * (Vector const &x1)
    {
        int p = 0;
        if (x1.n != n)
            return 0;
        else
            for (int i = 0; i < n; i++)
                p += v[i] * x1.v[i];
        return p;
    }
    
    ~Vector()                           //destructor
    {
        n = 0;
        delete[] v;         
    }
};

istream& operator >> (istream &input, Vector &x1)
{
    input >> x1.n;
    for (int i = 0; i < x1.n; i++)
        input >> x1.v[i];
    return input;
}

ostream& operator << (ostream &output, Vector x1)
{
    output << x1.n << "\n" << "[";
    for (int i = 0; i < x1.n-1; i++)
        output << x1.v[i] << ",";
    //output << x1.v[n-1] << "]";
    return output;
}

int main()
{
    /*Vector v(3, 5);
    for(int i = 0; i < v.getN(); i++)
       cout<<v[i]<<' ';
    v.suma();
    v.max();*/
    return 0;
}
